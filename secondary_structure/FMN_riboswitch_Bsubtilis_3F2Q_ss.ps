%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Fri Jul  4 13:00:30 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAACGUGUAAAGGUUCGAGUGGAAGCGAAACAGGUGCGCCUCAAGGUGGAAAGCGAAAGGUUUGCGUCACCCGCACCCAGCCGGAGUCGGCAAGACAUUGUCA\
) } def
/len { sequence length } bind def

/coor [
[94.90424347 164.17716980]
[82.93729401 173.22108459]
[67.99626160 174.54981995]
[54.62115479 167.75964355]
[46.87615585 154.91383362]
[47.11467743 139.91572571]
[55.26424026 127.32268524]
[68.84872437 120.96121979]
[79.52374268 110.42348480]
[65.10346985 114.55333710]
[50.68319702 118.68319702]
[45.28641510 133.11166382]
[32.57706451 141.49771118]
[17.54451370 140.80026245]
[5.94402170 131.49615479]
[-5.19253302 142.73393250]
[-19.55817795 138.79978943]
[-33.97845078 142.92964172]
[-48.39872360 147.05949402]
[-57.40717316 160.33456421]
[-73.41314697 161.42463684]
[-84.13823700 149.49351501]
[-81.35507202 133.69371033]
[-67.19866180 126.14550781]
[-52.52857971 132.63922119]
[-38.10830688 128.50936890]
[-23.68803406 124.37951660]
[-13.58291435 113.43712616]
[1.81416547 117.07588196]
[6.73066854 103.04141998]
[19.11498451 94.49198914]
[34.33680344 94.87876129]
[46.55334091 104.26291656]
[60.97361374 100.13306427]
[75.39389038 96.00320435]
[85.92234802 85.31903839]
[89.84007263 70.83969116]
[93.75779724 56.36034775]
[97.67552185 41.88100433]
[101.59324646 27.40165710]
[105.51097107 12.92231274]
[91.57530975 18.47184372]
[77.69246674 12.79146767]
[71.64384460 -0.93493634]
[76.81972504 -15.01365280]
[90.31900024 -21.55349541]
[104.57526398 -16.88884735]
[111.59792328 -3.63319898]
[117.99257660 -17.20185280]
[124.38723755 -30.77050591]
[130.78189087 -44.33915710]
[137.17655945 -57.90781021]
[132.85008240 -68.10372925]
[134.89743042 -78.76319122]
[142.38163757 -86.31578064]
[152.58769226 -88.37215424]
[159.76763916 -101.54212952]
[166.94758606 -114.71211243]
[174.12753296 -127.88208771]
[181.30747986 -141.05206299]
[183.58041382 -157.85296631]
[200.35394287 -160.31980896]
[207.36775208 -144.88468933]
[194.47746277 -133.87211609]
[187.29751587 -120.70214081]
[180.11756897 -107.53216553]
[172.93762207 -94.36218262]
[165.75767517 -81.19220734]
[167.80101013 -62.05878067]
[150.74520874 -51.51315308]
[144.35055542 -37.94449997]
[137.95588684 -24.37584686]
[131.56123352 -10.80719376]
[125.16657257 2.76145911]
[119.99031830 16.84003639]
[116.07259369 31.31938171]
[112.15486908 45.79872894]
[108.23714447 60.27807236]
[104.31941986 74.75741577]
[100.40169525 89.23676300]
[109.26068115 79.23517609]
[124.93479156 75.86553955]
[143.21807861 82.39203644]
[156.49203491 89.37787628]
[169.76599121 96.36371613]
[183.03994751 103.34955597]
[199.39643860 102.16741180]
[208.37322998 115.89145660]
[200.73576355 130.40356445]
[184.34083557 130.77493286]
[176.05410767 116.62351990]
[162.78015137 109.63768005]
[149.50619507 102.65183258]
[136.23223877 95.66599274]
[130.59040833 100.60763550]
[119.30676270 110.49092102]
[113.66493988 115.43257141]
[118.84120178 129.51113892]
[124.01745605 143.58972168]
[135.15821838 156.36940002]
[125.96204376 170.61251831]
[109.72978973 165.71864319]
[109.93888092 148.76597595]
[104.76261902 134.68740845]
[99.58636475 120.60882568]
[97.37932587 135.44557190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 35]
[10 34]
[11 33]
[15 29]
[17 27]
[18 26]
[19 25]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[83 94]
[84 93]
[85 92]
[86 91]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
